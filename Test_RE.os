Перем ПутьК1С;
Перем ПроектКлюч;
Перем ПроектФайл;
Перем ПроектИмя;
Перем База1С;
Перем ПользовательИмя;
Перем ПользовательПароль;
Перем КаталогРелизов;
Перем КаталогДампа;
Перем ПравилаРефакторинга;

Функция ПолучитьТекстФайла(ФайлИмя)
	Перем оФайл, оТекст, ТекстФайла;

	ТекстФайла = "";
	оФайл = Новый Файл(ФайлИмя);
	Если оФайл.Существует() Тогда
		оТекст = Новый ЧтениеТекста(ФайлИмя, КодировкаТекста.UTF8);
		ТекстФайла = оТекст.Прочитать();
		оТекст.Закрыть();
		ОсвободитьОбъект(оТекст);
	КонецЕсли;
	Возврат ТекстФайла;
КонецФункции


Функция ТекстФайлаЗаписать(ФайлИмя, ТекстФайла)
	Перем оФайл, оТекст;
	Перем Результат;

	оФайл = Новый Файл(ФайлИмя);
	оТекст = Новый ЗаписьТекста(ФайлИмя, КодировкаТекста.UTF8);
	оТекст.Записать(ТекстФайла);
	оТекст.Закрыть();
	ОсвободитьОбъект(оТекст);
	Возврат Результат;
КонецФункции

Функция ПолучитьНастрокиПравил()
	ПутьКФайлуПравил = "RefactoringRules.json";
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуПравил, "UTF-8");
	НастройкиПравил = ПрочитатьJSON(ЧтениеJSON, False);
	Возврат НастройкиПравил;
КонецФункции

Процедура ПодготовитьИсходники(Каталог)
	НастройкиПравил = ПолучитьНастрокиПравил();
	// НастройкиПравил.Свойство("Коментарии");

	// Файлы = НайтиФайлы( ОбъединитьПути(Каталог, "Ext\ObjectModule.bsl"), Истина);
	// Для Каждого НайденныйФайл Из Файлы Цикл
	// 	Если НайденныйФайл.ЭтоФайл() Тогда
	// 		ОбработатьФайл(НайденныйФайл.ПолноеИмя, НастройкиПравил);
	 		ОбработатьФайл("E:\TEMP\TEST_RE\ObjectModule.bsl", НастройкиПравил);
	// 	КонецЕсли;
	// КонецЦикла;
КонецПроцедуры


Процедура ОбработатьФайл(ИмяФайла, НастройкиПравил)

	ТекстМодуля = ПолучитьТекстФайла(ИмяФайла);
	ОтработатьПравила(ТекстМодуля, НастройкиПравил);
	// УбратьКомментарии(ТекстМодуля);

	ТекстФайлаЗаписать("E:\TEMP\TEST_RE\ObjectModule.bsl", ТекстМодуля);
	Сообщить("..." + СтрЗаменить(ИмяФайла, КаталогДампа, ""));
КонецПроцедуры


Процедура ОтработатьПравила(ТекстМодуля, НастройкиПравил)
	Перем ПравилоШаблон, ПравилоЗамена, ПравилоОписание;

	Сообщить("= Отработка правил.");
	КоличествоКлючей = НастройкиПравил.Количество();
	Если КоличествоКлючей = 0 Тогда
		Сообщить("Нет правил для отработки.");
		Возврат;
	КонецЕсли;

	Для каждого Правило из НастройкиПравил Цикл
		Если Лев(Правило.Ключ, 1) = "_" Тогда
			Продолжить;
		КонецЕсли;

		Если Правило.Значение.Свойство("Шаблон") = Неопределено Тогда
			Сообщить("Не определен Шаблон для правила: " + Правило.Ключ);
			НастройкиПравил.Удалить(Правило.Ключ);
			Продолжить;
		КонецЕсли;
		ПравилоШаблон = Правило.Значение.Шаблон;

		Если Правило.Значение.Свойство("ЗаменитьНа") Тогда
			СтрокаЗамены = Правило.Значение.ЗаменитьНа;
		Иначе
			СтрокаЗамены = "";
		КонецЕсли;

		// Правило.Значение.Свойство("Описание", ПравилоОписание);
		Если Правило.Значение.Свойство("Описание", ПравилоОписание) Тогда
			ПравилоСообщение = ПравилоОписание;
		ИначеЕсли НЕ ПустаяСтрока(СтрокаЗамены) Тогда
			ПравилоСообщение = СтрШаблон("меняем по шаблону <%1> на <%2>", ПравилоШаблон, СтрокаЗамены);
		Иначе
			ПравилоСообщение = СтрШаблон("удаляем по шаблону <%1>", ПравилоШаблон);
		КонецЕсли;
		Сообщить("+" + ПравилоСообщение);
		ТекстМодуля = Новый РегулярноеВыражение(ПравилоШаблон)
						.Заменить(ТекстМодуля, СтрокаЗамены);

	КонецЦикла;

КонецПроцедуры

Процедура УбратьКомментарии(ТекстМодуля)
	Перем PATTERN;
	// PATTERN = "( */{2,}.*$)|(^ *#Область .*\n+)|(^ *#КонецОбласти *$\n+)|(\s+$)";
	// PatternComments = "\s*//(?!\!!!).*$";
	PATTERN = "\s*[^:]//(?!!!).*$";
	ТекстМодуля = Новый РегулярноеВыражение(PATTERN).Заменить(ТекстМодуля, "");
	// РелизНомер = Результат[0].Группы[1].Значение;
	// ТекстМодуля = Новый РегулярноеВыражение("\n{3,}").Заменить(Результат, Символы.ПС + Символы.ПС);
КонецПроцедуры



КаталогДампа = "e:\Temp\Test_Release\ViPNetЭДО_1С_Редакция_3";

ПодготовитьИсходники(КаталогДампа);

Сообщить("Процесс завершен.");
