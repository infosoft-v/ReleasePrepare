#Использовать json
#Использовать cmdline
#Использовать 1commands
#Использовать tempfiles
#Использовать logos

Перем Лог;
Перем ПутьК1С;
Перем ПроектКлюч;
Перем ПроектФайл;
Перем ПроектИмя;
Перем КаталогБазы1С;
Перем ПользовательИмя;
Перем ПользовательПароль;
Перем КаталогЗапуска;
Перем КаталогРелизов;
Перем КаталогДампа;
Перем НастройкиПроекта;



Функция ВзятьВКавычки(Строка)
	Возврат """" + Строка + """";
КонецФункции


Функция ЭтоСуществующийФайл(ПутьКФайлу, ПримечаниеКФайлу)
	Перем Файл;

	Если СтрНайти(ПутьКфайлу, "\")=0 Тогда
		ПутьКФайлу = ОбъединитьПути(Новый Файл(ТекущийСценарий().Источник).Путь, ПутьКФайлу);
	КонецЕсли;
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
			ЛогСообщения(СтрШаблон("Отсутствует %1: %2", ПримечаниеКФайлу, ПутьКФайлу), 4, Истина);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции


Функция ЛогСообщения(ТекстСообщения, УровеньСообщения, ВыводНаКонсоль)
	Если УровеньСообщения = 0 Тогда
		Лог.Отладка(ТекстСообщения);
	ИначеЕсли УровеньСообщения = 1 Тогда
		Лог.Информация(ТекстСообщения);
	ИначеЕсли УровеньСообщения = 2 Тогда
		Лог.Предупреждение(ТекстСообщения);
	ИначеЕсли УровеньСообщения = 3 Тогда
		Лог.Ошибка(ТекстСообщения);
	ИначеЕсли УровеньСообщения = 4 Тогда
		Лог.КритичнаяОшибка(ТекстСообщения);
	Иначе
	КонецЕсли;
	Если ВыводНаКонсоль Тогда
		Сообщить(ТекстСообщения);
	КонецЕсли
КонецФункции


Функция ПолучитьТекстФайла(ФайлИмя)
	Перем оФайл, оТекст, ТекстФайла;

	ТекстФайла = "";
	оФайл = Новый Файл(ФайлИмя);
	Если оФайл.Существует() Тогда
		оТекст = Новый ЧтениеТекста(ФайлИмя, КодировкаТекста.UTF8);
		ТекстФайла = оТекст.Прочитать();
		оТекст.Закрыть();
		ОсвободитьОбъект(оТекст);
	КонецЕсли;
	Возврат ТекстФайла;
КонецФункции


Функция ТекстФайлаЗаписать(ФайлИмя, ТекстФайла)
	Перем оФайл, оТекст;
	Перем Результат;

	оФайл = Новый Файл(ФайлИмя);
	оТекст = Новый ЗаписьТекста(ФайлИмя, КодировкаТекста.UTF8);
	оТекст.Записать(ТекстФайла);
	оТекст.Закрыть();
	ОсвободитьОбъект(оТекст);
	Возврат Результат;
КонецФункции


Функция ОбработкуРазобрать(ПутьКФайлу, КаталогДампа)
	ЛогСообщения("выгружаем обработку...", 1, Истина);
	Команда = Новый Команда;
	СтрокаЗапуска = ВзятьВКавычки(ПутьК1С) + " DESIGNER"
		+ " /F" + ВзятьВКавычки(КаталогБазы1С)
		+ " /N" + ВзятьВКавычки(ПользовательИмя)
		+ " /P" + ВзятьВКавычки(ПользовательПароль)
		+ " /DumpExternalDataProcessorOrReportToFiles" + КаталогДампа
		+ " " + ПутьКФайлу;
		// + " /Out" + ОбъединитьПути(КаталогВременныхФайлов(), ПроектКлюч + "_dump.log");
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	ЛогСообщения("Запуск команды: " + СтрокаЗапуска, 1, Ложь);
	КодВозврата = Команда.Исполнить();
	Если КодВозврата <> 0 Тогда
		ЛогСообщения(
			"проблемы при выгрузке файлов из обработки. КодВозврата = "+ Строка(КодВозврата),
			3,
			Истина
			);
		ЛогСообщения("Вывод платформы при попытке выгрузки: " + Команда.ПолучитьВывод(), 3, Ложь);
		Возврат Ложь;
	КонецЕсли;
	ЛогСообщения("обработка разобрана.", 1, Истина);
	Возврат Истина;

КонецФункции


Процедура ПодготовитьИсходники(Каталог)
	ЛогСообщения("Рефакторинг исходников...", 1, Истина);
	НастройкиПравил = ПолучитьНастрокиПравил();
	КоличествоПравил = НастройкиПравил.Количество();
	Если КоличествоПравил = 0 Тогда
		ЛогСообщения("Не определены правила обработки файлов.", 2, Истина);
	КонецЕсли;

	Файлы = НайтиФайлы(Каталог, "*.bsl", Истина);
	Для Каждого НайденныйФайл Из Файлы Цикл
		Если НайденныйФайл.ЭтоФайл() Тогда
			ОбработатьФайл(НайденныйФайл.ПолноеИмя, НастройкиПравил);
		КонецЕсли;
	КонецЦикла;
	ЛогСообщения("Рефакторинг завершен.", 1, Истина);
КонецПроцедуры


Функция ПолучитьИмяПроекта(КаталогДампа)
	Файлы = НайтиФайлы(КаталогДампа, "*.*", Ложь);
	Для Каждого оФайл Из Файлы Цикл
		Если оФайл.ЭтоКаталог() Тогда
			Возврат оФайл.Имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции


Функция ПолучитьНастрокиПравил()
	ПутьКФайлуПравил = "RefactoringRules.json";
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуПравил, "UTF-8");
	НастройкиПравил = ПрочитатьJSON(ЧтениеJSON, False);
	Возврат НастройкиПравил;
КонецФункции


Процедура ОбработатьФайл(ИмяФайла, НастройкиПравил)

	ЛогСообщения(СтрЗаменить(ИмяФайла, КаталогДампа, ""), 1, Истина);
	ТекстМодуля = ПолучитьТекстФайла(ИмяФайла);
	Если НастройкиПравил.Количество() > 0 Тогда
		ОтработатьПравила(ТекстМодуля, НастройкиПравил);
	КонецЕсли;

	ТекстФайлаЗаписать(ИмяФайла, ТекстМодуля);
КонецПроцедуры


Процедура ОтработатьПравила(ТекстМодуля, НастройкиПравил)
	Перем ПравилоШаблон, ПравилоЗамена, ПравилоОписание;

	Для каждого Правило из НастройкиПравил Цикл
		Если Правило.Значение.Свойство("ИспользоватьПравило") И Правило.Значение.ИспользоватьПравило = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ Правило.Значение.Свойство("Шаблон") Тогда
			ЛогСообщения("Не определен шаблон для правила: " + Правило.Ключ, 3, Истина);
			НастройкиПравил.Удалить(Правило.Ключ);
			Продолжить;
		КонецЕсли;
		ПравилоШаблон = Правило.Значение.Шаблон;

		Если Правило.Значение.Свойство("ЗаменитьНа") Тогда
			СтрокаЗамены = Правило.Значение.ЗаменитьНа;
		Иначе
			СтрокаЗамены = "";
		КонецЕсли;

		Если Правило.Значение.Свойство("Описание", ПравилоОписание) Тогда
			ПравилоСообщение = ПравилоОписание;
		ИначеЕсли НЕ ПустаяСтрока(СтрокаЗамены) Тогда
			ПравилоСообщение = СтрШаблон("заменяем по шаблону <%1> на <%2>", ПравилоШаблон, СтрокаЗамены);
		Иначе
			ПравилоСообщение = СтрШаблон("удаляем по шаблону <%1>", ПравилоШаблон);
		КонецЕсли;
		ЛогСообщения("..." + ПравилоСообщение, 1, Ложь);
		ТекстМодуля = Новый РегулярноеВыражение(ПравилоШаблон).Заменить(ТекстМодуля, СтрокаЗамены);

	КонецЦикла;

КонецПроцедуры


Функция ДанныеВерсии(ИмяФайла)
	Перем ПаттернПоиска;
	Перем НомерГруппы;
	Перем ВерсияНомер;

	// ПаттернПоиска = "\n\s*м_сОбработка_Версия\s*=\s*\""(\d{1,2}-\d{2}-\d{3})""\s*;";
	Если НЕ НастройкиПроекта.Свойство("ПоискНомераВерсии") Тогда
		ЛогСообщения("В настройках проекта отсутствует секция ""ПоискНомераВерсии"" с параметрами поиска номера версии. Для формирования имена мастер-обработки берем строку x-xx-xxx", 1, Ложь);
		ВерсияНомер = "x-xx-xxx";
		Возврат ВерсияНомер;
	ИначеЕсли НЕ НастройкиПроекта.ПоискНомераВерсии.Свойство("ПаттернПоиска") Тогда
		ЛогСообщения("В настройках секции ""ПоискНомераВерсии"" отсутствует паттерн поиска номера версии в коде. Для формирования имена мастер-обработки берем строку x-xx-xxx", 1, Ложь);
		ВерсияНомер = "x-xx-xxx";
		Возврат ВерсияНомер;
	ИначеЕсли НЕ НастройкиПроекта.ПоискНомераВерсии.Свойство("НомерГруппы") Тогда
		ЛогСообщения("В настройках секции ""ПоискНомераВерсии"" отсутствует номер группы для получения номера версии из найденного фрагмента. Для формирования имена мастер-обработки берем строку x-xx-xxx", 1, Ложь);
		ВерсияНомер = "x-xx-xxx";
		Возврат ВерсияНомер;
	КонецЕсли;

	ПаттернПоиска = НастройкиПроекта.ПоискНомераВерсии.ПаттернПоиска;
	ЛогСообщения(СтрШаблон("Шаблон поиска номера версии ""%1"" ", ПаттернПоиска), 0, Ложь);
	НомерГруппы = НастройкиПроекта.ПоискНомераВерсии.НомерГруппы;

	ТекстФайла = ПолучитьТекстФайла(ИмяФайла);

	Результат = Новый РегулярноеВыражение(ПаттернПоиска).НайтиСовпадения(ТекстФайла);

	Если Результат.Количество() = 0 Тогда
		ЛогСообщения("При поиске номера версии совпадений не найдено. Используем строку ""x-xx-xxx"" ", 2, Истина);
		ВерсияНомер = "x-xx-xxx";
	ИначеЕсли Результат.Количество() > 1 Тогда
		ЛогСообщения("При поиске номера версии найдено более одного совпадения. Берем первое.", 2, Истина);
		Счетчик = 0;
		Для Каждого Совпадение из Результат Цикл
			ЛогСообщения(СтрШаблон("Результат %1: = %2", Счетчик, Совпадение.Значение), 0, Ложь);
			Счетчик = Счетчик + 1;
		КонецЦикла;
		ВерсияНомер = Результат[0].Группы[НомерГруппы].Значение;
	Иначе
		ЛогСообщения(СтрШаблон("Результат поиска номера версии по шаблону = %1", Строка(Результат[0].Значение)), 0, Ложь);
		ВерсияНомер = Результат[0].Группы[НомерГруппы].Значение;
	КонецЕсли;
	ЛогСообщения("Номер версии = " + ВерсияНомер, 1, Истина);
	Возврат ВерсияНомер;
КонецФункции


Функция ПутьКФайлуМастерСборки()
	Перем ВерсияНомер;
	Перем ИмяФайлаСборки;

	ФайлДляПоиска = ОбъединитьПути(КаталогДампа, ПроектИмя, "Ext\ObjectModule.bsl");
	ВерсияНомер = ДанныеВерсии(ФайлДляПоиска);
	ИмяФайлаСборки = ОбъединитьПути(
		КаталогРелизов,
		ПроектИмя + "_" + ВерсияНомер + ".epf"
		);
	Возврат ИмяФайлаСборки;
КонецФункции


Функция ОбработкуСобрать(ПутьКФайлуСборкиПроекта, ПутьКФайлуМастерОбработки)
	Перем ФайлЛогаКоманды;

	ФайлЛогаКоманды = ОбъединитьПути(КаталогВременныхФайлов(), ПроектИмя + "_load.log");
	Команда = Новый Команда;
	СтрокаЗапуска = ВзятьВКавычки(ПутьК1С) + " DESIGNER"
		+ " /F" + ВзятьВКавычки(КаталогБазы1С)
		+ " /N" + ВзятьВКавычки(ПользовательИмя)
		+ " /P" + ВзятьВКавычки(ПользовательПароль)
		+ " /LoadExternalDataProcessorOrReportFromFiles " + ПутьКФайлуСборкиПроекта
		+ " " + ПутьКФайлуМастерОбработки
		+ " /Out" + ФайлЛогаКоманды;

	ЛогСообщения("Формирование мастер-обработки из " + ПутьКФайлуСборкиПроекта + "...", 1, Истина);
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	КодВозврата = Команда.Исполнить();
	Если КодВозврата <> 0 Тогда
		ЛогСообщения(
			"проблемы при загрузке файлов в обработки. КодВозврата = "+ Строка(КодВозврата),
			3,
			Истина
			);
		ЛогСообщения("Вывод платформы при попытке загрузки: " + Команда.ПолучитьВывод(), 3, Ложь);
		Возврат Ложь;
	КонецЕсли;
	ЛогСообщения("Мастер-обработка сформирована в " + ПутьКФайлуМастерОбработки, 1, Истина);
	Возврат Истина;
КонецФункции



Парсер = Новый ПарсерАргументовКоманднойСтроки();
Парсер.ДобавитьИменованныйПараметр("-prj");
Парсер.ДобавитьИменованныйПараметр("-cfg");

ПараметрыЗапуска = Парсер.Разобрать(АргументыКоманднойСтроки);
ФайлНастроек = ПараметрыЗапуска["-cfg"];
ПроектКлюч = ПараметрыЗапуска["-prj"];

Лог = Логирование.ПолучитьЛог("releaseprepare.app.messages");
ФайлЖурнала = Новый ВыводЛогаВФайл;
ФайлЖурнала.ОткрытьФайл(ОбъединитьПути(КаталогЗапуска, "ReleasePrepare.log"));
Лог.ДобавитьСпособВывода(ФайлЖурнала);
Лог.УстановитьУровень(УровниЛога.Отладка);
Лог.Информация("-------------" + Символы.ПС);
Лог.Информация(
	СтрШаблон("%1 - запуск с -prj=%2 -cfg=%3", Строка(ТекущаяДата()), ПроектКлюч, ФайлНастроек)
	);

ОшибкаЗапуска = Ложь;
Если ПроектКлюч = Неопределено ИЛИ ПустаяСтрока(ПроектКлюч) Тогда
	ЛогСообщения("Не передан ключ проекта.", 4, Истина);
	ОшибкаЗапуска = Истина;
КонецЕсли;

Если ФайлНастроек = Неопределено ИЛИ ПустаяСтрока(ФайлНастроек) Тогда
	ФайлНастроек = ОбъединитьПути(Новый Файл(ТекущийСценарий().Источник).Путь, "config.json");
	ЛогСообщения("Не передан файл настроек. Используем " + ФайлНастроек, 2, Истина);
КонецЕсли;
Если НЕ ЭтоСуществующийФайл(ФайлНастроек, "файл настроек проектов") Тогда
	ОшибкаЗапуска = Истина;
КонецЕсли;

Если ОшибкаЗапуска Тогда
	Сообщить(Символы.ПС + "Пример запуска: " + Символы.ПС);
	Сообщить("oscript ReleasePrepare.os -prj <КлючПроекта> (-cfg <ФайлНастроек>)");
	Сообщить(" <КлючПроекта>  - ключ проекта из файла настроек.");
	Сообщить("                  (Обязательный.)");
	Сообщить(" <ФайлНастроек> - имя json-файла с описанием настроек запуска для проектов.");
	Сообщить("                  (Необязательный. При отсутствии берется ""Config.json"" из каталога запуска)");
	Лог.КритичнаяОшибка("Неправильный вызов программ");
	Лог.Закрыть();
	Exit(0);
КонецЕсли;

// ПроектКлюч = "Test_Release";
КаталогЗапуска = Новый Файл(ТекущийСценарий().Источник).Путь;
ЧтениеJSON = Новый ЧтениеJSON();
ЧтениеJSON.ОткрытьФайл(ФайлНастроек, "UTF-8");
НастройкиЗапуска = ПрочитатьJSON(ЧтениеJSON, False);

Если НЕ НастройкиЗапуска.Свойство(ПроектКлюч) Тогда
	ЛогСообщения("В файле настроек отсутствует описание проекта: " + ПроектКлюч, 3, Истина);
	Лог.Закрыть();
	Exit(0);
КонецЕсли;
НастройкиПроекта = НастройкиЗапуска[ПроектКлюч];

Если НЕ НастройкиЗапуска.Свойство("Programs") Тогда
	ЛогСообщения("В файле настроек отсутствует секция ""Programs"": ", 1, Истина);
	Лог.Закрыть();
	Exit(0);
ИначеЕсли НЕ НастройкиЗапуска.Programs.Свойство("v83") Тогда
	ЛогСообщения("В секции ""Programs"" файла настроек отсутствует указание пути к 1С (ключ ""v83"")", 1, Истина);
	Лог.Закрыть();
	Exit(0);
КонецЕсли;
ПутьК1С  = НастройкиЗапуска["Programs"]["v83"];
Если НЕ ЭтоСуществующийФайл(ПутьК1С, "файл запуска 1С") Тогда
	Лог.Закрыть();
	Exit(0)
КонецЕсли;

Если НЕ НастройкиПроекта.Свойство("ФайлОбработки") Тогда
	ЛогСообщения("В файле настроек отсутствует описание пути к файлу обработки: " + ПроектКлюч, 1, Истина);
	Лог.Закрыть();
	Exit(0);
КонецЕсли;
ПроектФайл = НастройкиПроекта["ФайлОбработки"];
Если НЕ ЭтоСуществующийФайл(ПроектФайл, "файл обработки") Тогда
	Лог.Закрыть();
	Exit(0)
КонецЕсли;

КаталогБазы1С = НастройкиПроекта["КаталогБазы1С"];
Если НЕ ЭтоСуществующийФайл(КаталогБазы1С, "каталог базы 1С") Тогда
	Лог.Закрыть();
	Exit(0)
КонецЕсли;
ПользовательИмя = НастройкиПроекта["Пользователь1С"]["Имя"];
ПользовательПароль = НастройкиПроекта["Пользователь1С"]["Пароль"];

КаталогДампа = ВременныеФайлы.СоздатьКаталог(ПроектКлюч);

КаталогРелизов = НастройкиЗапуска["КаталогРелизов"];
Если НЕ ЭтоСуществующийФайл(КаталогРелизов, "каталог релизов") Тогда
	Лог.Закрыть();
	Exit(0)
КонецЕсли;

ЛогСообщения("Ключ проекта   : " + ПроектКлюч, 1, Истина);
ЛогСообщения("Файл проекта   : " + ПроектФайл, 1, Истина);
ЛогСообщения("Путь к 1С      : " + ПутьК1С, 1, Истина);
ЛогСообщения("Файл базы 1С   : " + КаталогБазы1С, 1, Истина);
ЛогСообщения("Имя польз.     : " + ПользовательИмя, 1, Истина);
ЛогСообщения("Пароль польз.  : " + ?(НЕ ПустаяСтрока(ПользовательПароль), ПользовательПароль, "без пароля"), 1, Истина);
ЛогСообщения("Каталог дампа  : " + КаталогДампа, 1, Истина);
ЛогСообщения("Каталог релизов: " + КаталогРелизов, 1, Истина);

Если НЕ ОбработкуРазобрать(ПроектФайл, КаталогДампа) Тогда
	Лог.Закрыть();
	Exit(0)
КонецЕсли;

ПроектИмя = ПолучитьИмяПроекта(КаталогДампа);
ПодготовитьИсходники(КаталогДампа);

Если ОбработкуСобрать(ОбъединитьПути(КаталогДампа, ПроектИмя + ".xml"), ПутьКФайлуМастерСборки()) Тогда
	ЛогСообщения("Процесс завершен.", 1, Истина);
КонецЕсли;

Лог.Закрыть();

